#include<stdio.h>

// 数组的指针 指向数组的指针
// 指针的数组 装着指针的数组

// 优先级 ()>[]>*

// (*p)[n]:数组的指针 [p是一个指针，这个指针指向一个一维数组，数组长度为n]
//  *p[n]:指针的数组，即指针数组

int main() {
	// 一维数组
	int a[5] = {1,2,3,4,5};
	// 步长为5的数组指针，即数组里有5个元素
	int (*p)[5];
	// 把数组a的地址赋给p，则p为数组a的地址，则*p表示数组a本身
	p = &a;
	
	// %p输出地址，%d输出十进制
	// \n回车
	// 在C中，在几乎所有使用数组的表达式中
	// 数组名的值是个指针常量，也就是数组第一个元素的地址，它的类型取决于数组元素的类型
	printf("%p\n",a); // 输出数组a的地址，一般用数组的首元素地址标识一个数组
	printf("%p\n",p); // 根据上面，p为数组a的地址，输出数组a的地址
	printf("%p\n",*p); // *p表示数组a本身，一般用数组的首元素地址来标识一个数组
	printf("%p\n",&a[0]); // a[0]的地址
	printf("%p\n",&a[1]); // a[1]的地址
	printf("%p\n",p[0]); // 数组首元素的地址
	printf("%d\n",**p); // *p表示地址 则*(*p)表示值，当*p表示数组首元素地址时,**p表示首元素本身
	printf("%d\n",*p[0]); // 根据优先级 p[0]表示首元素地址，则*p[0]表示首元素本身，即首元素的值1
	printf("%d\n",*p[1]); // 错误 不表示a[1]... 

	// 总结: a[数组 输出a地址],p[p为数组a地址],*p[表示数组a本身，输出数组a地址]
	// p[0] 数组首元素地址 **p[*p拿到的数组本身->首元素地址 **p输出首元素的值] 

	// 将二维数组赋给指针 
	int b[3][4];
	int (*pp)[4]; // 定义一个数组指针，指向含4个元素的一维数组
	pp = b; // 将该二维数组的首地址赋给pp，也就是b[0]或&b[0]，二维数组pp=b和pp=&b[0]是等价的 
	pp++; // pp=pp+1 该语句执行过后pp指向从行b[0][]变为了行b[1][], pp=&b[1] 
	
	// 根据上面二维数组可以得出，数组指针也称指向一维数组的指针，所以数组指针也称行指针 
	 

	return 0;
}
