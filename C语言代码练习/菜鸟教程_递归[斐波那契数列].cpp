#include<stdio.h>

// 斐波那契数列

int fibonaci(int);

int fibonaci(int i){
	if(i==0){
		return 0;
	}
	if(i==1){
		return 1;
	}
	return fibonaci(i-1) + fibonaci(i-2);
}

int main(){
	int i;
	for(i=0;i<10;i++){
		printf("%d\t\n",fibonaci(i));
	}
	return 0;
}

// 递归是一个简洁的概念 同时也是一种很有用的手段
// 但是 使用递归是要付出代价的，与直接的语句(如while循环)相比
// 递归函数会耗费更多的运行的时间，并且要占用大量的栈空间。
// 递归函数每次调用自身时候，都需要把它的状态存在栈中
// 以便在它调用自身后，程序可以返回到它原来的状态。未经精心设计的递归函数总是会带来麻烦

// 采用递归方法来解决问题，必须符合一下三个条件:
// 1.可以把要解决的问题转换为一个新问题，而这个新问题的解决方法扔与原来的解决方法相同
// 说明:解决方法的方法相同，调用函数的参数每次不同(有规律的递增或递减) 如果没有规律也就不能使用递归调用
// 2.可以应用这个转换过程使问题得到解决。
// 说明: 
 
