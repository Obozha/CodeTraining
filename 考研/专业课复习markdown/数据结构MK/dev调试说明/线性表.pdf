<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-type" content="text/html;charset=UTF-8">
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"> </script>
<script type="text/x-mathjax-config">MathJax.Hub.Config({"tex2jax": {"inlineMath": [['$','$'], ['\\(','\\)']]}});</script>
<script type="text/x-mathjax-config">MathJax.Hub.Config({"HTML-CSS": {"availableFonts":["TeX"],"scale": 150}});</script>

<style>
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

body {
	font-family: "Segoe WPC", "Segoe UI", "SFUIText-Light", "HelveticaNeue-Light", sans-serif, "Droid Sans Fallback";
	font-size: 14px;
	padding: 0 12px;
	line-height: 22px;
	word-wrap: break-word;
}

#code-csp-warning {
	position: fixed;
	top: 0;
	right: 0;
	color: white;
	margin: 16px;
	text-align: center;
	font-size: 12px;
	font-family: sans-serif;
	background-color:#444444;
	cursor: pointer;
	padding: 6px;
	box-shadow: 1px 1px 1px rgba(0,0,0,.25);
}

#code-csp-warning:hover {
	text-decoration: none;
	background-color:#007acc;
	box-shadow: 2px 2px 2px rgba(0,0,0,.25);
}


body.scrollBeyondLastLine {
	margin-bottom: calc(100vh - 22px);
}

body.showEditorSelection .code-line {
	position: relative;
}

body.showEditorSelection .code-active-line:before,
body.showEditorSelection .code-line:hover:before {
	content: "";
	display: block;
	position: absolute;
	top: 0;
	left: -12px;
	height: 100%;
}

body.showEditorSelection li.code-active-line:before,
body.showEditorSelection li.code-line:hover:before {
	left: -30px;
}

.vscode-light.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(0, 0, 0, 0.15);
}

.vscode-light.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(0, 0, 0, 0.40);
}

.vscode-dark.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(255, 255, 255, 0.4);
}

.vscode-dark.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(255, 255, 255, 0.60);
}

.vscode-high-contrast.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(255, 160, 0, 0.7);
}

.vscode-high-contrast.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(255, 160, 0, 1);
}

img {
	max-width: 100%;
	max-height: 100%;
}

a {
	color: #4080D0;
	text-decoration: none;
}

a:focus,
input:focus,
select:focus,
textarea:focus {
	outline: 1px solid -webkit-focus-ring-color;
	outline-offset: -1px;
}

hr {
	border: 0;
	height: 2px;
	border-bottom: 2px solid;
}

h1 {
	padding-bottom: 0.3em;
	line-height: 1.2;
	border-bottom-width: 1px;
	border-bottom-style: solid;
}

h1, h2, h3 {
	font-weight: normal;
}

h1 code,
h2 code,
h3 code,
h4 code,
h5 code,
h6 code {
	font-size: inherit;
	line-height: auto;
}

a:hover {
	color: #4080D0;
	text-decoration: underline;
}

table {
	border-collapse: collapse;
}

table > thead > tr > th {
	text-align: left;
	border-bottom: 1px solid;
}

table > thead > tr > th,
table > thead > tr > td,
table > tbody > tr > th,
table > tbody > tr > td {
	padding: 5px 10px;
}

table > tbody > tr + tr > td {
	border-top: 1px solid;
}

blockquote {
	margin: 0 7px 0 5px;
	padding: 0 16px 0 10px;
	border-left: 5px solid;
}

code {
	font-family: Menlo, Monaco, Consolas, "Droid Sans Mono", "Courier New", monospace, "Droid Sans Fallback";
	font-size: 14px;
	line-height: 19px;
}

body.wordWrap pre {
	white-space: pre-wrap;
}

.mac code {
	font-size: 12px;
	line-height: 18px;
}

pre:not(.hljs),
pre.hljs code > div {
	padding: 16px;
	border-radius: 3px;
	overflow: auto;
}

/** Theming */

.vscode-light,
.vscode-light pre code {
	color: rgb(30, 30, 30);
}

.vscode-dark,
.vscode-dark pre code {
	color: #DDD;
}

.vscode-high-contrast,
.vscode-high-contrast pre code {
	color: white;
}

.vscode-light code {
	color: #A31515;
}

.vscode-dark code {
	color: #D7BA7D;
}

.vscode-light pre:not(.hljs),
.vscode-light code > div {
	background-color: rgba(220, 220, 220, 0.4);
}

.vscode-dark pre:not(.hljs),
.vscode-dark code > div {
	background-color: rgba(10, 10, 10, 0.4);
}

.vscode-high-contrast pre:not(.hljs),
.vscode-high-contrast code > div {
	background-color: rgb(0, 0, 0);
}

.vscode-high-contrast h1 {
	border-color: rgb(0, 0, 0);
}

.vscode-light table > thead > tr > th {
	border-color: rgba(0, 0, 0, 0.69);
}

.vscode-dark table > thead > tr > th {
	border-color: rgba(255, 255, 255, 0.69);
}

.vscode-light h1,
.vscode-light hr,
.vscode-light table > tbody > tr + tr > td {
	border-color: rgba(0, 0, 0, 0.18);
}

.vscode-dark h1,
.vscode-dark hr,
.vscode-dark table > tbody > tr + tr > td {
	border-color: rgba(255, 255, 255, 0.18);
}

.vscode-light blockquote,
.vscode-dark blockquote {
	background: rgba(127, 127, 127, 0.1);
	border-color: rgba(0, 122, 204, 0.5);
}

.vscode-high-contrast blockquote {
	background: transparent;
	border-color: #fff;
}
</style>

<style>
/* Tomorrow Theme */
/* http://jmblog.github.com/color-themes-for-google-code-highlightjs */
/* Original theme - https://github.com/chriskempson/tomorrow-theme */

/* Tomorrow Comment */
.hljs-comment,
.hljs-quote {
	color: #8e908c;
}

/* Tomorrow Red */
.hljs-variable,
.hljs-template-variable,
.hljs-tag,
.hljs-name,
.hljs-selector-id,
.hljs-selector-class,
.hljs-regexp,
.hljs-deletion {
	color: #c82829;
}

/* Tomorrow Orange */
.hljs-number,
.hljs-built_in,
.hljs-builtin-name,
.hljs-literal,
.hljs-type,
.hljs-params,
.hljs-meta,
.hljs-link {
	color: #f5871f;
}

/* Tomorrow Yellow */
.hljs-attribute {
	color: #eab700;
}

/* Tomorrow Green */
.hljs-string,
.hljs-symbol,
.hljs-bullet,
.hljs-addition {
	color: #718c00;
}

/* Tomorrow Blue */
.hljs-title,
.hljs-section {
	color: #4271ae;
}

/* Tomorrow Purple */
.hljs-keyword,
.hljs-selector-tag {
	color: #8959a8;
}

.hljs {
	display: block;
	overflow-x: auto;
	color: #4d4d4c;
	padding: 0.5em;
}

.hljs-emphasis {
	font-style: italic;
}

.hljs-strong {
	font-weight: bold;
}
</style>

<style>
/*
 * Markdown PDF CSS
 */

pre {
	background-color: #f8f8f8;
	border: 1px solid #cccccc;
	border-radius: 3px;
	overflow-x: auto;
	white-space: pre-wrap;
	overflow-wrap: break-word;
}

pre:not(.hljs) {
	padding: 23px;
	line-height: 19px;
}

blockquote {
	background: rgba(127, 127, 127, 0.1);
	border-color: rgba(0, 122, 204, 0.5);
}

.emoji {
	height: 1.4em;
}

/* for inline code */
:not(pre):not(.hljs) > code {
	color: #C9AE75; /* Change the old color so it seems less like an error */
	font-size: inherit;
}

</style>

</head>
<body>
<h1 id="1-%E7%BA%BF%E6%80%A7%E8%A1%A8">1. 线性表</h1>
<h2 id="11-%E9%A1%BA%E5%BA%8F%E8%A1%A8">1.1. 顺序表</h2>
<h3 id="111-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E8%A1%A8%E7%A4%BA">1.1.1. 顺序表的存储表示</h3>
<hr>
<pre class="hljs"><code><div><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSIZE 100</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>{</span>
    ElemType *elem;  <span class="hljs-comment">// 存储空间的基地址 </span>
    <span class="hljs-keyword">int</span> length;         <span class="hljs-comment">// 当前长度 </span>
}SqList;             <span class="hljs-comment">// 顺序表结构类型为SqList </span>
</div></code></pre>
<h3 id="112-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96">1.1.2. 顺序表的初始化</h3>
<ol>
<li>为顺序表L动态分配一个预定义大小的数组空间，使elem指向这段空间的基地址。</li>
<li>将表的当前长度设为0</li>
</ol>
<hr>
<pre class="hljs"><code><div><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp;L)</span></span>{
    <span class="hljs-comment">// 构造一个空的顺序表L</span>
    L.elem=<span class="hljs-keyword">new</span> ElemType[MAXSIZE]; <span class="hljs-comment">// 向堆申请内存空间 </span>
    <span class="hljs-keyword">if</span>(!L.elem)
        <span class="hljs-built_in">exit</span>(OVERFLOW);
    L.length=<span class="hljs-number">0</span>;                      <span class="hljs-comment">// 设置长度</span>
    <span class="hljs-keyword">return</span> OK;
}
</div></code></pre>
<h3 id="113-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%8F%96%E5%80%BC">1.1.3. 顺序表的取值</h3>
<ol>
<li>判断值定的位置序号i值是否合理（1&lt;=i&lt;=L.length）,若不合理，则返回ERROR。</li>
<li>若i值合理，则将第i个元素<code>L.elem[i-1]</code>赋值给参数e，通过e返回第i个数据元素的值</li>
</ol>
<hr>
<pre class="hljs"><code><div><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList L,<span class="hljs-keyword">int</span> i,ElemType &amp;e)</span></span>{
    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L.length)
        <span class="hljs-keyword">return</span> ERROR;
    e=L.elem[i<span class="hljs-number">-1</span>];
    <span class="hljs-keyword">return</span> OK;
}
</div></code></pre>
<h3 id="114-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE">1.1.4. 顺序表的查找</h3>
<ol>
<li>从第一个元素起，依次和e相比较，若找到与e相等的元素L.elem[i]，则查找成功，返回该元素的序号i+1</li>
<li>若查遍整个顺序表都没有找到，则查找失败</li>
</ol>
<hr>
<pre class="hljs"><code><div><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList L,ElemType e)</span></span>{
    <span class="hljs-comment">// 在顺序表L中查找值为e的数据元素，返回其序号</span>
    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;L.length;i++)
        <span class="hljs-keyword">if</span>(L.elem[i]==e)
            <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;
}
</div></code></pre>
<h3 id="115-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5">1.1.5. 顺序表的插入</h3>
<ol>
<li>判断插入位置i是否合法（i值得合法范围是1&lt;=i&lt;=n+1）,若不合法返回ERROR。</li>
<li>判断顺序表的存储空间是否已满，若满则返回ERROR。</li>
<li>将第n个至第i个的元素依次向后移动一个位置，空出第i个位置（i=n+1时无需移动）。</li>
<li>将要插入的新元素e放入第i个位置。</li>
<li>表长加1</li>
</ol>
<hr>
<pre class="hljs"><code><div><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> i,ElemType e)</span></span>{
    <span class="hljs-comment">// 在顺序表L中第i个位置插入新的元素e，i的合法范围是1&lt;=i&lt;=L.length+1</span>
    <span class="hljs-keyword">if</span>((i&lt;<span class="hljs-number">1</span>)||(i&gt;L.length+<span class="hljs-number">1</span>))
        <span class="hljs-keyword">return</span> ERROR;
    <span class="hljs-keyword">if</span>(L.length=MAXSIZE)
        <span class="hljs-keyword">return</span> ERROR;
    <span class="hljs-keyword">for</span>(j=L.length<span class="hljs-number">-1</span>;j&gt;=i<span class="hljs-number">-1</span>;j--){
        L.elem[j+<span class="hljs-number">1</span>]=L.elem[j];
    }
    L.elem[i<span class="hljs-number">-1</span>]=e;
    ++L.length;
    <span class="hljs-keyword">return</span> OK;
}
</div></code></pre>
<h3 id="116-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4">1.1.6. 顺序表的删除</h3>
<ol>
<li>判断删除位置i是否合法（合法值为1&lt;=i&lt;=n），若不合法则返回ERROR。</li>
<li>将第i+1个至第n个元素依次向前移动一个位置（i=n时无需移动）。</li>
<li>表长减1</li>
</ol>
<hr>
<pre class="hljs"><code><div><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> i)</span></span>{
    <span class="hljs-comment">// 在顺序表L中删除第i个元素，i值的合法范围是1&lt;=i&lt;=L.length;</span>
    <span class="hljs-keyword">if</span>((i&lt;<span class="hljs-number">1</span>)||(i&gt;L.length))  <span class="hljs-comment">// i值不合法</span>
        <span class="hljs-keyword">return</span> ERROR;
    <span class="hljs-keyword">for</span>(j=i;j&lt;=L.length<span class="hljs-number">-1</span>;j++)
        L.elem[j<span class="hljs-number">-1</span>]=L.elem[j];
    L.length--;
    <span class="hljs-keyword">return</span> OK;
}
</div></code></pre>
<h2 id="12-%E9%93%BE%E8%A1%A8">1.2. 链表</h2>
<h3 id="121-%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E8%A1%A8%E7%A4%BA">1.2.1. 单链表的存储表示</h3>
<hr>
<pre class="hljs"><code><div><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>{</span>
    ElemType data;      <span class="hljs-comment">// 结点的数据域</span>
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 结点的指针域</span>
}LNode,*LinkList;       <span class="hljs-comment">// LinkList为指向结构体LNode的指针类型</span>
</div></code></pre>
<h3 id="122-%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96">1.2.2. 单链表的初始化</h3>
<ol>
<li>生成新结点作为头结点，用头指针L指向头结点</li>
<li>头指针的指针域置空</li>
</ol>
<hr>
<pre class="hljs"><code><div><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>{
    <span class="hljs-comment">// 构造一个空单链表L</span>
    L=<span class="hljs-keyword">new</span> LNode;    <span class="hljs-comment">// 生成新结点作为头节点</span>
    L-&gt;next=<span class="hljs-literal">NULL</span>;   <span class="hljs-comment">// 头结点的指针域置空</span>
    <span class="hljs-keyword">return</span> OK;
}
</div></code></pre>
<h3 id="123-%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%8F%96%E5%80%BC">1.2.3. 单链表的取值</h3>
<ol>
<li>用指针p指向首元结点，用j做计数器初值赋为1</li>
<li>从首元结点开始依次递减开始依次顺着链域向下访问，只要指向当前结点的指针p不为空，并且没有到达序号为i的结点，则循环执行以下操作：
<ul>
<li>p指向下一个结点</li>
<li>计数器j相应加1</li>
<li>退出循环时，如果指针p为空，或者计数器j大于i，说明指定的序号i值不合法（i大于表长n或i小于等于0），取值失败返回ERROR；否则取值成功，此时j=i时，p所指的结点就是要找的第i个结点，用参数e保存当前结点的数据域，返回OK</li>
</ul>
</li>
</ol>
<hr>
<pre class="hljs"><code><div><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> i,ElemType &amp;e)</span></span>{
    <span class="hljs-comment">// 带头结点的单链表L中根据序号i获取元素的值，用e返回L中第i个数据元素的值</span>
    p=L-&gt;next;
    j=<span class="hljs-number">1</span>;
    <span class="hljs-comment">// 初始化，p指向首元结点，计数器j初值赋1</span>
    <span class="hljs-keyword">while</span>(p&amp;&amp;j&lt;i){
        p=p-&gt;next;
        ++j;
    }
    <span class="hljs-keyword">if</span>(!p||j&gt;i)
        <span class="hljs-keyword">return</span> ERROR;
    e=p-&gt;data;
    <span class="hljs-keyword">return</span> OK;
}
</div></code></pre>
<h3 id="124-%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8C%89%E5%80%BC%E6%9F%A5%E6%89%BE">1.2.4. 单链表的按值查找</h3>
<ol>
<li>用指针p指向首元结点。</li>
<li>从首元结点开始依次顺着链域next向下寻找，只要指向当前结点的指针p不为空，并且p所指结点的数据域不等于给值e，则循环执行以下操作：p指向下一个结点。</li>
<li>返回p。若查找成功，p此时即为结点的地址值，若查找失败，p的值即为NULL。</li>
</ol>
<pre class="hljs"><code><div><span class="hljs-function">LNode *<span class="hljs-title">LocateElem</span><span class="hljs-params">(LinkList L,ElemType e)</span></span>{
    <span class="hljs-comment">// 在带头结点的单链表L中查找值为e的元素</span>
    p=L-&gt;next;           <span class="hljs-comment">// 初始化，p指向首元结点</span>
    <span class="hljs-keyword">while</span>(p&amp;&amp;p-&gt;data!=e) <span class="hljs-comment">// 顺链域向后扫描，直到p为空或p所指向的数据域等于e</span>
        p=p-&gt;next;       <span class="hljs-comment">// p指向下一个结点</span>
    <span class="hljs-keyword">return</span> p;            <span class="hljs-comment">// 查找成功返回值为e的结点，查找失败p为空</span>
}
</div></code></pre>
<h3 id="125-%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5">1.2.5. 单链表的插入</h3>
<ol>
<li>查找结点 $a_{i-1}$并由指针p指向该结点。</li>
<li>生成一个新结点<code>*s</code></li>
<li>将新结点<code>*s</code>的数据置为e</li>
<li>将新结点<code>*s</code>的指针域指向结点$a_i$</li>
<li>将结点<code>*p</code>的指针域指向新结点<code>*s</code></li>
</ol>
<hr>
<pre class="hljs"><code><div><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> i,ElemType e)</span></span>{
    <span class="hljs-comment">// 在带头结点的单链表L中第i个位置插入值为e的新结点</span>
    p=L;
    j=<span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span>(p&amp;&amp;(j&gt;i<span class="hljs-number">-1</span>)){
        p=p-&gt;next;
        ++j;
    }
    <span class="hljs-keyword">if</span>(!p||j&gt;i<span class="hljs-number">-1</span>)
        <span class="hljs-keyword">return</span> ERROR;
    s=<span class="hljs-keyword">new</span> LNode;
    s-&gt;data=e;
    s-&gt;next=p-&gt;next;
    p-&gt;next=s;
    <span class="hljs-keyword">return</span> OK;
}
</div></code></pre>
<h3 id="126-%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4">1.2.6. 单链表的删除</h3>
<ol>
<li>查找结点$a_(i-1)$并由指针p指向该结点</li>
<li>临时保存待删除结点$a_i$的地址在q，已备释放。</li>
<li>将结点<code>*p</code>的指针域指向$a_i$的直接后继结点</li>
<li>释放结点$a_i$的空间</li>
</ol>
<hr>
<pre class="hljs"><code><div><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> i)</span></span>{
    <span class="hljs-comment">// 在带头结点的单链表L中，删除第i个元素</span>
    p=L;
    j=<span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span>((p-&gt;next)&amp;&amp;(j&lt;i<span class="hljs-number">-1</span>)){ <span class="hljs-comment">// 查找第i个结点</span>
        p=p-&gt;next;
        ++j;
    }
    <span class="hljs-keyword">if</span>(!(p-&gt;next)||(j&gt;i<span class="hljs-number">-1</span>))    <span class="hljs-comment">// 当i&gt;n或i&lt;1时，删除位置不合理</span>
        <span class="hljs-keyword">return</span> ERROR;
    q=p-&gt;next;                 <span class="hljs-comment">// 临时保存被删结点的地址以备释放</span>
    p-&gt;next=q-&gt;next;           <span class="hljs-comment">// 改变删除结点前驱结点的指针域</span>
    <span class="hljs-keyword">delete</span> q;                  <span class="hljs-comment">// 释放删除结点的空间</span>
    <span class="hljs-keyword">return</span> OK;
}
</div></code></pre>
<h3 id="127-%E5%88%9B%E5%BB%BA%E5%8D%95%E9%93%BE%E8%A1%A8---%E5%89%8D%E6%8F%92%E6%B3%95">1.2.7. 创建单链表 - 前插法</h3>
<ol>
<li>创建一个只有头结点的空链表</li>
<li>根据待创建链表包括的元素个数n，循环n次执行以下操作
<ul>
<li>生成一个新结点<code>*p</code></li>
<li>输入元素值赋给新结点<code>*p</code>的数据域</li>
<li>将新结点*p插入到头结点之后。</li>
</ul>
</li>
</ol>
<hr>
<pre class="hljs"><code><div><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateList_H</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> n)</span></span>{
    <span class="hljs-comment">// 逆位序输入n个元素的值，建立带表头结点的单链表L</span>
    L=<span class="hljs-keyword">new</span> LNode;
    L-&gt;next=<span class="hljs-literal">NULL</span>;
    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++){
        p=<span class="hljs-keyword">new</span> LNode;        <span class="hljs-comment">// 生成新结点p</span>
        <span class="hljs-built_in">cin</span>&gt;&gt;p-&gt;data;       <span class="hljs-comment">// 输入元素值赋给新结点*p的数据域</span>
        p-&gt;next=L-&gt;next;    <span class="hljs-comment">// 将新结点*p插入到头结点之后</span>
        L-&gt;next=p;
    }
}
</div></code></pre>
<h3 id="128-%E5%88%9B%E5%BB%BA%E5%8D%95%E9%93%BE%E8%A1%A8---%E5%90%8E%E6%8F%92%E6%B3%95">1.2.8. 创建单链表 - 后插法</h3>
<ol>
<li>创建一个只有头结点的空链表</li>
<li>尾指针r初始化，指向头结点</li>
<li>根据创建链表包括的元素个数n，循环n次执行以下操作
<ul>
<li>生成一个新结点<code>*p</code></li>
<li>输入元素值赋给新结点<code>*p</code>的数据域</li>
<li>将新结点<code>*p</code>插入到尾结点<code>*r</code>之后；</li>
<li>尾指针r指向新的尾结点<code>*p</code></li>
</ul>
</li>
</ol>
<hr>
<pre class="hljs"><code><div><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateList_R</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> n)</span></span>{
    <span class="hljs-comment">// 正位序输入n个元素的值，建立带表头结点的单链表L</span>
    L=<span class="hljs-keyword">new</span> LNode;
    L-&gt;next=<span class="hljs-literal">NULL</span>;           <span class="hljs-comment">// 先建立一个带头结点的空链表</span>
    r=L;                    <span class="hljs-comment">// 尾指针r指向头结点</span>
    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++){
        p=<span class="hljs-keyword">new</span> LNode;        <span class="hljs-comment">// 生成新结点</span>
        <span class="hljs-built_in">cin</span>&gt;&gt;p-&gt;data;       <span class="hljs-comment">// 输入元素值赋给新结点*p的数据域</span>
        p-&gt;next=<span class="hljs-literal">NULL</span>;       <span class="hljs-comment">// 将新结点*p插入尾结点*r之后</span>
        r-&gt;next=p;
        r=p;                <span class="hljs-comment">// r指向新的尾结点*p</span>
    }
}
</div></code></pre>
<h2 id="13-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8">1.3. 双向链表</h2>
<h3 id="131-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E8%A1%A8%E7%A4%BA">1.3.1. 双向链表的存储表示</h3>
<hr>
<pre class="hljs"><code><div><span class="hljs-comment">// 双向链表的存储结构</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DuLNode</span>{</span>
    ElemType data;          <span class="hljs-comment">// 数据域</span>
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DuLNode</span> *<span class="hljs-title">prior</span>;</span>  <span class="hljs-comment">// 指向直接前驱</span>
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DuLNode</span> *<span class="hljs-title">next</span>;</span>   <span class="hljs-comment">// 指向直接后继</span>
}DuLNode,*DuLinkList;
</div></code></pre>
<h3 id="132-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5">1.3.2. 双向链表的插入</h3>
<pre class="hljs"><code><div><span class="hljs-function">Status <span class="hljs-title">ListInsert_DuL</span><span class="hljs-params">(DuLinkList &amp;L,<span class="hljs-keyword">int</span> i,ElemType)</span></span>{
    <span class="hljs-comment">// 带头结点的双线链表L中第i个位置之前插入元素e</span>
    <span class="hljs-keyword">if</span>(!(p=GetElem_DuL(L,i))) <span class="hljs-comment">// 在L中确定第i个元素的位置指针</span>
        <span class="hljs-keyword">return</span> ERROR;         <span class="hljs-comment">// p为NULL时，第i个元素不存在</span>
    s=<span class="hljs-keyword">new</span> DuLNode;            <span class="hljs-comment">// 生成新结点*s</span>
    s-&gt;data=e;                <span class="hljs-comment">// 将结点*s数据域置为e</span>
    s-&gt;prior=p-&gt;prior;        <span class="hljs-comment">// 将结点*s插入L中</span>
    p-&gt;prior-&gt;next=s;
    s-&gt;next=p;
    p-&gt;prior=s;
    <span class="hljs-keyword">return</span> OK;
}
</div></code></pre>
<h3 id="133-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4">1.3.3. 双向链表删除</h3>
<pre class="hljs"><code><div><span class="hljs-function">Status <span class="hljs-title">ListDelete_DuL</span><span class="hljs-params">(DuLinkList &amp;L,<span class="hljs-keyword">int</span> i)</span></span>{
    <span class="hljs-comment">// 删除带头结点的双向链表L中第i个元素</span>
    <span class="hljs-keyword">if</span>(!(p=GetElem_DuL(L,i))) <span class="hljs-comment">// 在L中确定第i个元素的位置指针p</span>
        <span class="hljs-keyword">return</span> ERROR;
    p-&gt;prior-&gt;next=p-&gt;next;
    p-&gt;next-&gt;prior=p-&gt;prior;
    <span class="hljs-keyword">delete</span> p;
    <span class="hljs-keyword">return</span> OK;
}
</div></code></pre>

</body>
</html>
